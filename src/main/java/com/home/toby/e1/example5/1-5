1.5 스프링의 Ioc

앞서 DaoFactory는 설계도 역할로써 애플리케이션 컴포넌트를 생성, 사용 관계를 맺어주는 역할을 했음
- 설정 정보로 등록
@Configuration, @Bean 애노테이션을 붙여줌으로 스프링의 Ioc 기능을 제공 받음

- 설정 정보로 등록한 class 사용
ApplicationContext 타입의 오브젝트 생성.
Java code로 작성된 class 파일은 AnnotationConfigApplicationContext의 오브젝트로 생성.
getBean() 메소드로 설정된 객체를 가져올 수 있음.
파라미터로 (@Bean 이 붙은 메소드이름 / 해당 class) 로 받음

1.5.2
DaoFactory를 직접 사용했을때와, ApplicationContext를 사용했을때 얻을 수 있는 장점
- 클라이언트는 구체적인 팩토리 클래스를 알 필요가 없음

- 애플리케이션 컨텍스트는 종합 IoC 서비스를 제공해줌

- 애플리케이션 컨텍스트는 빈을 검색하는 다양한 방법을 제공

1.5.3 스프링 IoC의 용어 정리

- bean : 스프링이 제어권을 가지고 직접 만들고 관계를 부여하는 객체
- bean Factory : 스프링의 IoC를 담당하는 핵심 컨테이너.
	빈 등록, 생성, 조회 등 그외 부가적인 빈을 관리하는 기능을 담당
	보통 이 빈 팩토리를 바로 사용하지 않고 이를 확장한 Apllication context를 주로 이용
- Ioc 오브젝트 : 빈의 생성과 관계설정 같은 제어를 담당, 빈 팩토리라고 부름
- application context : 빈 팩토리보다 좀 더 확장한 개념으로 빈 팩토리보다 주로 사용
	빈 팩토리라고 부를때는 주로 빈의 생성과 제어 관점
	애플리케이션 컨텍스트라고 할 때는 스프링이 제공하는 애플리케이션 지원 기능을 모두 포함해서 이야기 하는것.
	application context는 BeanFactory를 상속함
	(IOC 방식을 따라 만들어진 일종의 빈 팩토리)
- 설정정보 /설정 메타정보 : 스프링 설정 정보는 애플리케이션 컨텍스트가 IoC를 적용하기 위해 사용하는 메타정보
	IoC 컨테이너에 의해 관리되는 애플리케이션 오브젝트를 생성하고 구성할 때 사용

- 컨테이너 or IoC 컨테이너 : IoC 방식으로 bean을 관리한다는 의미로  컨테이너 또는 IoC 컨테이너라함
	
	
	
	
	
	